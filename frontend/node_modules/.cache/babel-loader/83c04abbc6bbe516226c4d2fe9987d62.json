{"ast":null,"code":"export const BASE_URL = 'https://auth.nomoreparties.co';\nexport const signUp = _ref => {\n  let {\n    password,\n    email\n  } = _ref;\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    } else if (res.status === 400) {\n      return Promise.reject(`Ошибка: некорректно заполнено одно из полей`);\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  });\n};\nexport const signIn = _ref2 => {\n  let {\n    password,\n    email\n  } = _ref2;\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      \"Accept\": 'application/json',\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    } else if (res.status === 400) {\n      return Promise.reject(`Ошибка: не передано одно из полей`);\n    } else if (res.status === 401) {\n      return Promise.reject(`Ошибка: пользователь с email не найден`);\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  });\n};\nexport const checkToken = _ref3 => {\n  let {\n    token\n  } = _ref3;\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    }\n  }).then(res => {\n    if (res.ok) {\n      console.log(res);\n      return res.json();\n    }\n\n    if (res.status === 400) {\n      return Promise.reject(`Ошибка: Токен не передан или передан не в том формате`);\n    } else if (res.status === 401) {\n      return Promise.reject(`Ошибка: Переданный токен некорректен`);\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/anastasiiaandreeva/Desktop/Yandex.Practikum/dev/react-mesto-auth/src/utils/siteAuth.js"],"names":["BASE_URL","signUp","password","email","fetch","method","headers","body","JSON","stringify","then","res","ok","json","status","Promise","reject","signIn","checkToken","token","console","log"],"mappings":"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","sourcesContent":["export const BASE_URL = 'https://auth.nomoreparties.co';\n\nexport const signUp = ({password, email}) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  })\n    .then((res) => {\n      if (res.ok) {\n        return res.json()\n      } else if (res.status === 400) {\n        return Promise.reject(`Ошибка: некорректно заполнено одно из полей`)\n      } else {\n        return Promise.reject(`Ошибка: ${res.status}`)\n      }\n    })\n}\n\nexport const signIn = ({password, email}) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      \"Accept\": 'application/json',\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  })\n    .then((res) => {\n      if(res.ok) {\n        return res.json()\n      } else if (res.status === 400) {\n        return Promise.reject(`Ошибка: не передано одно из полей`)\n      } else if ( res.status === 401) {\n        return Promise.reject(`Ошибка: пользователь с email не найден`)\n      } else {\n        return Promise.reject(`Ошибка: ${res.status}`)\n      }\n    })\n}\n\nexport const checkToken = ({token}) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\" : `Bearer ${token}`\n    },\n  })\n    .then((res) => {\n      if(res.ok) {\n        console.log(res)\n        return res.json();\n      } if (res.status === 400) {\n        return Promise.reject(`Ошибка: Токен не передан или передан не в том формате`)\n      } else if ( res.status === 401) {\n        return Promise.reject(`Ошибка: Переданный токен некорректен`)\n      } else {\n        return Promise.reject(`Ошибка: ${res.status}`)\n      }\n    })\n}\n"]},"metadata":{},"sourceType":"module"}